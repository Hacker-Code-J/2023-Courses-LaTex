나레이터: 
안녕하세요, 여러분! 여러분의 모험을 설레는 마음으로 함께할 일일 나레이터, 푸바오입니다. 이제, 여러분과 함께할 특별한 모험을 시작해볼까요? 우리 모험의 정거장은 바로 PANDA팀이에요.
종강의 그 설레임을 함께 나눌, PANDA팀의 위대한 리더, 지용현 팀장님을 소개드릴게요! 여러분, 우리의 여정을 함께할 준비가 되셨나요? 지금부터 지용현 팀장님과 함께, 두근거리는 모험을 시작해보아요!

(박수 사운드)

지용현: 네. 안녕하세요. PANDA팀에서 위대한 리더를 맡고 있는 지용현입니다. 반갑습니다.

나레이터: 네 지용현 팀장님 우선 이번 쇼케이스 제목 설명 좀 해주실까요?

지용현: 우선 저희 팀부터 소개해드릴게요. 저희 팀 이름은 PANDA로 디지털 연산과 관련한 것들을 탐구하고 즐기는 사람들로 구성되어 있어요.
저희 프로젝트의 이름은 PANDA's Unbounded Big Arithmetic Operations 약어로 PUBAO라는 프로젝트를 진행했습니다.
이름 그대로 제한이 없는 큰 산술 연산을 목표로 촬영을 하고 있는 지금도 여전히 프로젝트를 진행하고 있습니다.
프로젝트의 이름은 PUBAO이고, 쇼케이스 제목으로는 Over the Long Long이라고 지어봤어요. C언어 정수 데이터 타입 중에 가장 큰 놈이 long long이 거든요.
그것보다도 더 큰 수에 대한 연산을 한다는 의미를 담고 있습니다.

나레이션: 네! 정말 멋진 쇼케이스 제목을 설명해주셔서 감사합니다. 여러분, 이제 'Over the Long Long'이라는 부제를 달고, 우리는 단순한 숫자의 세계를 넘어 새로운 차원의 산술 연산을 탐험할 것입니다. 신비한 모험처럼, 이론과 실제의 경계를 넘나들며, 큰 정수 연산의 새로운 지평을 열어갈 예정이에요. 자, 그럼 이 여정을 시작해볼까요?

I. 개발자들아, 나와라!
이제, PUBAO 프로젝트의 핵심 멤버, 재능 넘치는 개발자들을 만날 시간입니다. 이들은 프로젝트의 기술적 근간을 이루며 열정을 불어넣는 원동력이죠. 각자의 독특한 이야기와 함께, 이들이 PUBAO를 어떻게 현실로 만들어가고 있는지 들어보겠습니다. 팀장님 팀원 소개 부탁드립니다.

지용현: 저희팀은 총 4명의 개발자로 구성되어 있고, 각자의 역할이 잘 나뉘어져 있습니다. 이제는 유물이 되어가고 있는 19학번 3명의 친구와 파릇파릇한 23학번 친구 1명으로 구성되어 있습니다. 자 개인적으로 만나러 가봅시다.
처음으로 제가 아는 사람 중에 제일 착하고 제일 멋진 친구가 아닐까 싶습니다.

나레이션: 뻔뻔하시네요. (웃음 사운드)

지용현: 정말 위대한 리더라는 칭호가 아까운 정도로 PANDA팀의 심장으로 모든 걸 총괄하고 있는 정말 멋진 분입니다. 리더로서 프로젝트의 목표와 방향을 설정하고 비전을 이끌어 나갑니다.
계산 알고리즘의 실제 구현은 물론 기존 진행한 것들과 원활한 통합이 이루어지도록 정말 모든 걸 관리감독하고 있는 참으로 훌륭한 팀원이지 않을까 싶습니다.

나레이션: 혀가 좀 기신거 같은데

지용현:자! 다음으로는 우리 팀원은 새싹과도 같은 존재죠. 인턴 역할을 수행하고 있는 유근오 학우입니다. 계산기의 사용자 인터페이스를 디자인하고 개발하여 사용자 친화적이고 직관적인 디자인을 설계합니다. 개발된 라이브러리의 정확성과 효율성을 보장하기 위해 다양한 시나리오를
테스트를 시행하는 역할도 충실히 해주고 있습니다.
다음으로는 투 예찬쓰 개발자들을 소개합니다. 문예찬군은 빌더로서 필수 모듈 개발을 주도하고, 성능이 프로젝트 요구 사항에 부 합하는지 확인하는 작업을 진행하고 있습니다.
김예찬군 같은 경우는 벨리데이터로서 개발된 모듈이 버그가 없는지 확인하는 매우 중요한 작업을 맡고 있습니다.

나레이션: 
뻔뻔함이 넘치는 팀장님과 함께, PUBAO 프로젝트의 뛰어난 개발자들을 만나보셨습니다. 그들의 열정과 전문성이 이 프로젝트를 어떻게 특별하게 만드는지, 여러분도 느껴보셨나요? 다음으로는 이 팀이 어떠한 전략으로 이 복잡한 도전을 극복하고 있는지 탐험할 시간입니다. 

II. 전략은 우리의 무기!
이들의 접근 방식과 아이디어를 통해, PUBAO 프로젝트가 어떻게 새로운 경지를 열어가고 있는지 함께 살펴보아요!

지용현: 처음 팀의 목표는 크게 두 가지 입니다. 첫번째로 큰 정수에 대한 연산을 처리하는 라이브러리를 개발하는 것입니다. 여기서 말하는 연산이란 덧셈, 뺄셈, 곱셈, 몫과 나머지, 모듈러 지수승을 말합니다.
두번째로는 이러한 라이브러리를 활용해 Baby-Step/Giant-Step 알고리즘을 통해  DLP 문제를 푸는 해독기를 만드는 것을 목표로 하고 있습니다.

나레이션:
"우리는 PUBAO 프로젝트의 두 가지 주요 목표에 대해 알아보았습니다 이 놀라운 목표들을 달성하기 위해, 우리 팀은 어떤 전략을 수립하고 어떤 진전을 이루어 왔을까요? 바로 이 질문에 대한 답을 찾기 위해 다음 섹션으로 넘어갑니다."

지용현: 저희는 노션을 활용한 협업을 진행하였습니다. 노션의 다양한 기능들을 활용해 일들을 진행하였습니다.
그 중 하나가 노츠라는 브레인스토밍 페이지를 하나 만들어서 팀원들 각자의 아이디어나 실험데이터 혹은 여러 정보들을 기록해 놓은 공간입니다.
팀원들은 생각과 아이디어들을 글로 읽어 봄으로써 더 빠른 정보공유가 이루어졌다고 생각합니다.

다음으로는 To-DO list 관리와 현황 테이블 사용입니다. 왼쪽의 To-do list 같은 경우 추가버튼이 있어서 본인이 해야할 것들을 바로바로 추가해서 확인할 수 있도록 해두었습니다.
현황 테이블은 저희가 구현해야 하는 것들을 표로 만들어서 얼마나 진행했는지를 한눈에 볼 수 있었습니다. 표 내용을 하나씩 채워나가는 재미도 있었고요

다음으로는 프로젝트 진행상황을 나타낸 것입니다. 퍼센트로 볼 수 있게 보드형, 흔히 게시판 형태로 표현을 해보았었고 ,
저는 노션의 장점 중 하나가 바로 이것이라고 생각합니다. 이전 보드형으로 봤던 것을 같은 데이터지만 타입라인형으로 다르게 표현해 보기도 하였습니다.
동일한 데이터베이스를 다양한 방식으로 즉각 표현이 가능한 게 노션의 장점 중 하나가 아닐까 싶습니다.

두 번째 전략으로 저는 개발자 노트라는 것을 작성해 팀원들에게 매주 배포를 해주었습니다.
개발자 노트에는 다음 그림과 같이 코드를 조금 이쁘게 작성해서 문서화 한다던가 그림을 그려 넣는다던가, 또는 이론과 이론에 대한 증명같은 내용들을 작성해서
팀원들이 더 좋은 성과를 이룰 수 있도록 도움을 주었다고 생각합니다.

나레이션: 지금까지 우리는 PUBAO 프로젝트의 뒤에서 이루어진 협업의 마법을 살펴보았습니다. 노션을 통한 브레인 스토밍, To-Do 리스트 관리, 그리고 현황 테이블을 이용한 진행 상황 파악은 팀의 생산성을 대폭 향상시켰죠.
개발자 노트를 통한 정보 공유와 협업은 프로젝트의 진전을 촉진하는 데 크게 기여했습니다. 이 모든 것들이 PUBAO 프로젝트 진행에 필수적인 요소였습니다.

그럼 이제, PUBAO의 핵심으로 넘어가 보겠습니다. 바로 라이브러리의 구조와 성능이죠.
III. 라이브러리야, 너의 힘을 보여줘!
"이제 PUBAO의 심장부라고 할 수 있는 라이브러리의 구조와 기능들을 소개할 차례입니다. 

지용현: 우선 저희 라이브러리의 필요성에 대해 이야기 해볼게요. DLP 즉, 이산대수 문제는 많은 공개 키 시스템의 보안을 뒷받침합니다.
DLP를 보다 강력하게 구현하기 위해서는 다음과 같은 큰 수의 보안 파라미터로 사용해야 합니다.
그러나 C언어의 기본 데이터 타입은 이런 요구를 만족시키기에는 부족하며, 대부분의 표준 정수
데이터 타입은 최대 64-bit로 제한됩니다. 따라서 C에서 기본적으로 지원하는 것보다 몇 배 이상 큰 수를
처리하는데 큰 어려움이 있습니다.
이러한 배경을 바탕으로, 우리는 C언어에서 큰 정수 연산을 효율적으로 수행할 수 있는 라이브러리의 개발을 목표로 큰 수의 연산에 최적화되도록 설계할 것입니다.
또한 이 라이브러리는 이산대수 문제의 해결을 위한 Baby-step/Giant-step algorithm 를 구현하는데 사용될것이며 최종적으로 
DLP 해독기를 개발하고자 합니다.

나레이션:
여러분, 방금 PUBAO 프로젝트의 중요성을 듣고 나니, 기대가 되지 않으셨나요? 이산대수 문제(DLP)는 공개 키 시스템의 보안에 있어 중심적인 역할을 하며, 이를 더욱 강화하기 위해서는 큰 수의 연산이 필요합니다. 하지만, 기존의 C언어 데이터 타입으로는 이러한 요구를 충족시키기 어려웠죠. 마치 여름방학의 도전과제를 해결하듯, 이 문제를 극복하기 위해 우리는 특별한 라이브러리를 개발했습니다.
이제, 이 라이브러리가 어떻게 구성되어 있는지 살펴볼 차례입니다. 이 섹션에서는 라이브러리의 내부 구조와 주요 기능에 대해 여러분에게 설명해드릴 예정이에요. 이 라이브러리를 통해 우리는 어떻게 새로운 계산의 지평을 열어가고 있는지 함께 알아보겠습니다.

지용현:
이제, 우리의 PUBAO 라이브러리 구조와 그 내부의 세부 사항을 여러분과 함께 살펴보겠습니다. 라이브러리의 각 부분을 차근차근 탐험해볼 거예요.
우선, 라이브러리의 첫 번째 층은 설정 파일인 config.h 파일입니다. 이 파일은 우리의 모험 기지와 같은 역할을 하죠. 그리고 그 아래, utils라는 파일에는 모험에 필요한 기본 도구들, 즉 필요한 기본적인 함수들을 구현해 놓았습니다.
다음으로, 이 utils 파일을 기반으로 arithmetic이라는 파일에서 본격적인 큰 수의 연산을 구현했습니다. 현재, 아쉽게도 이 라이브러리는 dlp 파일을 아직은 포함하고 있지 않지만, 계속 개발 중에 있으며 완료되는 대로 업데이트할 예정입니다.
arithmetic 파일에서는 주요 산술 연산들을 구현했는데요, 자세히 살펴볼까요?
덧셈, 뺄셈은 이미 구현되어 있고, 곱셈 연산은 Textbook, Improved Textbook, Karatsuba의 세 가지 방식으로 구현되어 있습니다.
제곱 연산은 Textbook과 Karatsuba 방식 모두로 가능하며,
나눗셈 연산은 Binary 버전과 General 버전을 제공합니다.
단, General 버전은 워드 길이 차이가 1만큼 날 때만 사용 가능하다는 점을 기억해주세요.
모듈러 지수승 연산은 L2R, R2L, Montgomery Ladder의 세 가지 버전을 지원하며, Barrett Reduction도 가능합니다. 그리고 마지막으로, EEA 연산도 현재 버전에서 지원하고 있습니다.

나레이션:
이렇게 라이브러리의 구조와 세부 사항을 살펴보았습니다. 이제 우리는 라이브러리를 어떻게 검증하고 테스트했는지 소개할 시간입니다. 우리가 어떻게 라이브러리의 각 기능을 철저히 시험하고 안정성을 확보했는지 여러분에게 보여드리는 중요한 순간이 될 거예요.
이 모든 과정을 통해, PUBAO 프로젝트가 어떻게 더 높은 수준의 안전성과 효율성을 달성하고 있는지 알아보겠습니다. 여러분, 이 흥미진진한 검증 과정에 함께 해주실 준비 되셨나요?

지용현:
저희는 개발은 linux와 MacOS에서 진행을 하여서 현재로서는 이 2가지 운영체제만 지원하고 있습니다. 윈도우즈 같은 경우는 현재 계획에는 없지만 차후에라도 테스트를 해볼까합니다.
메모리 누수를 다음 각 운영체제에서 valgrind와 leaks 명령어를 통해 확인해볼 결과 모두 메모리 누수가 없는 걸 확인하였습니다. linux와 macos에서 교차검증을 하였기에 더욱 신뢰할 수 있다고 생각합니다.

구현을 하고 메모리 누수없이 잘 실행이 되었다고 해서 올바른 계산을 했는냐라고 물으신다면 어떻게 대답할 수 있을까요?
저희는 구현한 함수가 잘 연산이 되는지 다음과 같은 테스트 과정을 진행하였습니다.
스텝1!. 우선 c언에서 자체적으로 파이썬 코드 형태로 출력하도록 합니다. 다음 사진의 예시는 모듈러 지수승의 연산을 테스트하는 과정입니다.
파이썬 코드 형식에 맞추어서 값을 출력해주면 됩다.

이제 이렇게 나온 출력값을 파이썬 파일 만들어서 복사 붙여넣고 실행하고 값 확인하고 이렇쿵 저렁쿵 이런 귀찮은 짓을 해야할까요?
스텝2! 저희가 makefile에 이 과정자체를 매크로처리로 해놓아서 입력 한번으로 바로 txt파일을 만들어주고 txt파일에는 각줄에 값이 true인지 false가 적히게 됩니다.

나레이션: 아 그러면 이제 실패했는지 보려면 저 텍스트파일에서 contral F 눌러서 찾아보면..

지용현: 아니죠! 저는 그 찾는 거 부터가 매우매우 귀찮습니다. makefile을 자세히 보시면 sucess_chart라는 파이썬 파일을 실행하는 것을 알 수 있어요.
이 파이썬 코드는 저 test.txt파일을 읽어서 성공률 그래프로 보여줍니다. 이것이 스텝3이 되겠습니다.
그림을 보시면 1000번의 테스트에서 1000번 모두 통과하여 성공률 100%을 나타내고 있는 것을 알 수 있어요.
정말 누가 그렸는지는 몰라도 정말 그래프를 이쁘게 잘 만들어줬어요. 정말 훌륭한 친구에요.

나레이션: 역시 뻔뻔..

지용현: 자 다음으로 우리 라이브러리의 성능을 확인해 볼 차례에요.



IV. 라이브러리의 진가를 보여주지!
"라이브러리의 진가는 실제 활용 사례에서 드러납니다. 이 섹션에서는 PUBAO 라이브러리가 어떻게 다양한 상황과 산업에서 적용되는지 구체적인 예시들을 통해 보여드립니다."
라이브러리의 강력한 기능에 감탄하셨죠? 이제 이 라이브러리가 실제 세계에서 어떻게 사용될 수 있는지, 그 진가를 여러분께 보여드릴 시간입니다. 실제 사례를 통해 이 기술이 어떻게 적용될 수 있는지 알아보겠습니다.

나레이션:
"라이브러리의 참된 가치는 실제 활용 사례에서 비로소 드러납니다. 이 섹션에서는 PUBAO 라이브러리가 어떻게 사용될 수 있는지, 구체적인 예시들을 통해 여러분에게 보여드리려 합니다."
라이브러리의 기능에 감탄하신 것처럼, 이제는 이 라이브러리가 어떻게 적용될 수 있는지, 그 진정한 가치를 여러분에게 보여드릴 시간입니다. PUBAO 라이브러리의 실제 사용 사례들이 여러분에게 새로운 인사이트와 영감을 주기를 바랍니다.

지용현: 
그렇습니다, 여러분. 저희는 이 라이브러리를 만들었고, 이제는 이것을 어떻게 활용할 수 있을지 고민의 시간을 가져보려 합니다. 저희의 최종 목표는 DLP(Discrete Logarithm Problem) 해독기를 만드는 것입니다. 이 중 하나의 해독 알고리즘은 바로 BS/GS(Baby-Step Giant-Step) 알고리즘입니다.
현재 저희는 개발 중인 단계에 있으며, 이 알고리즘은 저희가 지금까지 구현한 연산으로 만들 수 있습니다. 한 가지 예외는 제곱근 연산인데, 현재 테스트 단계에 있습니다. 저희는 newton_method와 binary_method를 활용해 제곱근 연산을 거의 완료했습니다. 이 부분은 문제가 없지만, 아직 테스트 단계이기 때문에 라이브러리에는 포함되어 있지 않습니다. 아, 여기서 정정하고 싶은 부분이 있습니다. 우리는 제곱근의 정확한 값을 구하는 것이 아니라, 그 근사 정수값을 구하고 있습니다. 나머지 연산들, 예를 들면 곱셉, 덧셈, 모듈러 지수승은 모두 저희 라이브러리에서 가져와 사용할 수 있고, 모듈러 역원의 경우도 EEA를 구현했기 때문에 문제가 없습니다. 시간이 좀 더 있었다면 쇼케이스 전에 완성할 수 있었을 것 같아 아쉬움이 남습니다.

다음으로는 약간의 공수표일지 모르지만, 저희의 추후 개발 계획을 말씀드리겠습니다. BS/GS 알고리즘이 개발이 완료된다면, DLP를 해결하는 또 다른 알고리즘인 Pollard's Rho Method를 구현해볼 생각입니다. 현재로서는 이러한 계획을 가지고 있다는 것만 알려드립니다.



IV. 라이브러리의 진가를 보여주지! 종료 후:
"라이브러리의 실용성에 대해 이해하셨나요? 이제 마지막으로, PUBAO 프로젝트가 어떻게 경제적 가치를 창출할 수 있는지, 그리고 우리의 수익 모델이 무엇인지 살펴보겠습니다. 이 부분은 특히 비즈니스 관점에서 매우 중요합니다."

V. 역시 돈이 최고야!
"마지막으로, 모든 혁신적인 프로젝트의 핵심 요소인 수익 모델에 대해 이야기해볼 거예요. PUBAO가 어떻게 지속 가능하고 수익성 있는 방식으로 운영될 수 있는지, 그 비밀을 공개합니다."




